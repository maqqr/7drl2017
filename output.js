// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
    "use strict";

  exports.replicate = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                         
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $29 = compare(dictOrd)(x)(y);
              if ($29 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($29 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($29 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ $29.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["max"] = max;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  exports["Monad"] = Monad;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];      
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["deleteAt"] = deleteAt;
  exports["head"] = head;
  exports["index"] = index;
  exports["tail"] = tail;
  exports["unsafeIndex"] = unsafeIndex;
  exports["updateAt"] = updateAt;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Axe = (function () {
      function Axe() {

      };
      Axe.value = new Axe();
      return Axe;
  })();
  var Dagger = (function () {
      function Dagger() {

      };
      Dagger.value = new Dagger();
      return Dagger;
  })();
  var Sword = (function () {
      function Sword() {

      };
      Sword.value = new Sword();
      return Sword;
  })();
  var Common = (function () {
      function Common() {

      };
      Common.value = new Common();
      return Common;
  })();
  var Rusty = (function () {
      function Rusty() {

      };
      Rusty.value = new Rusty();
      return Rusty;
  })();
  var Masterwork = (function () {
      function Masterwork() {

      };
      Masterwork.value = new Masterwork();
      return Masterwork;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Mine = (function () {
      function Mine() {

      };
      Mine.value = new Mine();
      return Mine;
  })();
  var GoblinCave = (function () {
      function GoblinCave() {

      };
      GoblinCave.value = new GoblinCave();
      return GoblinCave;
  })();
  var Cave = (function () {
      function Cave() {

      };
      Cave.value = new Cave();
      return Cave;
  })();
  var WizardTower = (function () {
      function WizardTower() {

      };
      WizardTower.value = new WizardTower();
      return WizardTower;
  })();
  var Healing = (function () {
      function Healing() {

      };
      Healing.value = new Healing();
      return Healing;
  })();
  var Warming = (function () {
      function Warming() {

      };
      Warming.value = new Warming();
      return Warming;
  })();
  var Ground = (function () {
      function Ground(value0) {
          this.value0 = value0;
      };
      Ground.create = function (value0) {
          return new Ground(value0);
      };
      return Ground;
  })();
  var Wall = (function () {
      function Wall(value0) {
          this.value0 = value0;
      };
      Wall.create = function (value0) {
          return new Wall(value0);
      };
      return Wall;
  })();
  var Mountain = (function () {
      function Mountain(value0) {
          this.value0 = value0;
      };
      Mountain.create = function (value0) {
          return new Mountain(value0);
      };
      return Mountain;
  })();
  var Forest = (function () {
      function Forest(value0) {
          this.value0 = value0;
      };
      Forest.create = function (value0) {
          return new Forest(value0);
      };
      return Forest;
  })();
  var Water = (function () {
      function Water(value0) {
          this.value0 = value0;
      };
      Water.create = function (value0) {
          return new Water(value0);
      };
      return Water;
  })();
  var Puddle = (function () {
      function Puddle(value0) {
          this.value0 = value0;
      };
      Puddle.create = function (value0) {
          return new Puddle(value0);
      };
      return Puddle;
  })();
  var Door = (function () {
      function Door(value0) {
          this.value0 = value0;
      };
      Door.create = function (value0) {
          return new Door(value0);
      };
      return Door;
  })();
  var River = (function () {
      function River() {

      };
      River.value = new River();
      return River;
  })();
  var StairsUp = (function () {
      function StairsUp() {

      };
      StairsUp.value = new StairsUp();
      return StairsUp;
  })();
  var StairsDown = (function () {
      function StairsDown() {

      };
      StairsDown.value = new StairsDown();
      return StairsDown;
  })();
  var DungeonEntrance = (function () {
      function DungeonEntrance() {

      };
      DungeonEntrance.value = new DungeonEntrance();
      return DungeonEntrance;
  })();
  var ErrorTile = (function () {
      function ErrorTile() {

      };
      ErrorTile.value = new ErrorTile();
      return ErrorTile;
  })();
  var Player = (function () {
      function Player(value0) {
          this.value0 = value0;
      };
      Player.create = function (value0) {
          return new Player(value0);
      };
      return Player;
  })();
  var AlphaWolf = (function () {
      function AlphaWolf() {

      };
      AlphaWolf.value = new AlphaWolf();
      return AlphaWolf;
  })();
  var Wolf = (function () {
      function Wolf() {

      };
      Wolf.value = new Wolf();
      return Wolf;
  })();
  var Bear = (function () {
      function Bear() {

      };
      Bear.value = new Bear();
      return Bear;
  })();
  var Goblin = (function () {
      function Goblin() {

      };
      Goblin.value = new Goblin();
      return Goblin;
  })();
  var Snowman = (function () {
      function Snowman() {

      };
      Snowman.value = new Snowman();
      return Snowman;
  })();
  var IceCorpse = (function () {
      function IceCorpse() {

      };
      IceCorpse.value = new IceCorpse();
      return IceCorpse;
  })();
  var Tim = (function () {
      function Tim() {

      };
      Tim.value = new Tim();
      return Tim;
  })();
  var Ismo = (function () {
      function Ismo() {

      };
      Ismo.value = new Ismo();
      return Ismo;
  })();
  var Cloak = (function () {
      function Cloak() {

      };
      Cloak.value = new Cloak();
      return Cloak;
  })();
  var Chest = (function () {
      function Chest() {

      };
      Chest.value = new Chest();
      return Chest;
  })();
  var Gloves = (function () {
      function Gloves() {

      };
      Gloves.value = new Gloves();
      return Gloves;
  })();
  var CommonA = (function () {
      function CommonA() {

      };
      CommonA.value = new CommonA();
      return CommonA;
  })();
  var LightA = (function () {
      function LightA() {

      };
      LightA.value = new LightA();
      return LightA;
  })();
  var ThickA = (function () {
      function ThickA() {

      };
      ThickA.value = new ThickA();
      return ThickA;
  })();
  var MasterworkA = (function () {
      function MasterworkA() {

      };
      MasterworkA.value = new MasterworkA();
      return MasterworkA;
  })();
  var Weapon = (function () {
      function Weapon(value0) {
          this.value0 = value0;
      };
      Weapon.create = function (value0) {
          return new Weapon(value0);
      };
      return Weapon;
  })();
  var Armour = (function () {
      function Armour(value0) {
          this.value0 = value0;
      };
      Armour.create = function (value0) {
          return new Armour(value0);
      };
      return Armour;
  })();
  var Potion = (function () {
      function Potion(value0) {
          this.value0 = value0;
      };
      Potion.create = function (value0) {
          return new Potion(value0);
      };
      return Potion;
  })();
  var Wood = (function () {
      function Wood() {

      };
      Wood.value = new Wood();
      return Wood;
  })();
  var Creature = function (x) {
      return x;
  };
  var GameState = function (x) {
      return x;
  };
  var weaponTypeStats = function (v) {
      if (v instanceof Axe) {
          return {
              dmg: 5, 
              hit: -3 | 0, 
              weight: 12
          };
      };
      if (v instanceof Dagger) {
          return {
              dmg: -5 | 0, 
              hit: 5, 
              weight: 4
          };
      };
      return {
          dmg: 2, 
          hit: 0, 
          weight: 10
      };
  };
  var weaponPrefixStats = function (v) {
      if (v instanceof Rusty) {
          return {
              dmg: -2 | 0, 
              hit: 0, 
              weight: -1 | 0
          };
      };
      if (v instanceof Masterwork) {
          return {
              dmg: 5, 
              hit: 2, 
              weight: 0
          };
      };
      if (v instanceof Sharp) {
          return {
              dmg: 2, 
              hit: 0, 
              weight: 0
          };
      };
      return {
          dmg: 0, 
          hit: 0, 
          weight: 0
      };
  };
  var tileIcon = function (v) {
      if (v instanceof Ground) {
          return ".";
      };
      if (v instanceof Wall) {
          return "#";
      };
      if (v instanceof Mountain) {
          return "^";
      };
      if (v instanceof Forest) {
          return "\x05";
      };
      if (v instanceof Water) {
          return "\xf7";
      };
      if (v instanceof Puddle) {
          if (v.value0.frozen) {
              return "#";
          };
          if (!v.value0.frozen) {
              return ".";
          };
          throw new Error("Failed pattern match at Rogue line 179, column 30 - line 180, column 1: " + [ v.value0.frozen.constructor.name ]);
      };
      if (v instanceof Door) {
          return "+";
      };
      if (v instanceof River) {
          return "~";
      };
      if (v instanceof StairsUp) {
          return "<";
      };
      if (v instanceof StairsDown) {
          return ">";
      };
      if (v instanceof DungeonEntrance) {
          return "o";
      };
      return "?";
  };
  var showTile = new Data_Show.Show(function (v) {
      if (v instanceof Ground) {
          return "Ground";
      };
      if (v instanceof Wall) {
          return "Wall";
      };
      if (v instanceof Mountain) {
          return "Mountain";
      };
      if (v instanceof Forest) {
          return "Forest";
      };
      if (v instanceof Water) {
          return "Water";
      };
      if (v instanceof Puddle) {
          return "Puddle";
      };
      if (v instanceof Door) {
          return "Door";
      };
      if (v instanceof River) {
          return "River";
      };
      if (v instanceof StairsUp) {
          return "StairsUp";
      };
      if (v instanceof StairsDown) {
          return "StairsDown";
      };
      if (v instanceof DungeonEntrance) {
          return "DungeonEntrance";
      };
      if (v instanceof ErrorTile) {
          return "ErrorTile";
      };
      throw new Error("Failed pattern match at Rogue line 144, column 5 - line 145, column 5: " + [ v.constructor.name ]);
  });
  var showCreature = new Data_Show.Show(function (v) {
      if (v.creatureType instanceof Player) {
          return v.creatureType.value0.name;
      };
      if (v.creatureType instanceof AlphaWolf) {
          return "alpha wolf";
      };
      if (v.creatureType instanceof Wolf) {
          return "wolf";
      };
      if (v.creatureType instanceof Bear) {
          return "bear";
      };
      if (v.creatureType instanceof Goblin) {
          return "goblin";
      };
      if (v.creatureType instanceof Snowman) {
          return "snowman";
      };
      if (v.creatureType instanceof IceCorpse) {
          return "frozen zombie";
      };
      if (v.creatureType instanceof Tim) {
          return "evil sorcerer";
      };
      return "Ismo";
  });
  var setPlayer = function (v) {
      return function (pl) {
          var $105 = {};
          for (var $106 in v) {
              if ({}.hasOwnProperty.call(v, $106)) {
                  $105[$106] = v[$106];
              };
          };
          $105.player = pl;
          return $105;
      };
  };
  var setLevelTile = function (level) {
      return function (t) {
          return function (p) {
              var $108 = {};
              for (var $109 in level) {
                  if ({}.hasOwnProperty.call(level, $109)) {
                      $108[$109] = level[$109];
                  };
              };
              $108.tiles = Data_Maybe.fromMaybe(level.tiles)(Data_Array.updateAt((p.y * level.width | 0) + p.x | 0)(t)(level.tiles));
              return $108;
          };
      };
  };
  var setTile = function (v) {
      return function (t) {
          return function (p) {
              var $114 = {};
              for (var $115 in v) {
                  if ({}.hasOwnProperty.call(v, $115)) {
                      $114[$115] = v[$115];
                  };
              };
              $114.level = setLevelTile(v.level)(t)(p);
              return $114;
          };
      };
  };
  var setExits = function (l) {
      return function (u) {
          return function (d) {
              return {
                  tiles: l.tiles, 
                  width: l.width, 
                  height: l.height, 
                  enemies: l.enemies, 
                  items: l.items, 
                  up: u, 
                  down: d
              };
          };
      };
  };
  var potionEffect = function (v) {
      return function (v1) {
          if (v1 instanceof Potion && v1.value0.effect instanceof Healing) {
              var heal = function (v2) {
                  var $123 = {};
                  for (var $124 in v2) {
                      if ({}.hasOwnProperty.call(v2, $124)) {
                          $123[$124] = v2[$124];
                      };
                  };
                  $123.stats = (function () {
                      var $120 = {};
                      for (var $121 in v2.stats) {
                          if ({}.hasOwnProperty.call(v2.stats, $121)) {
                              $120[$121] = v2["stats"][$121];
                          };
                      };
                      $120.hp = Data_Ord.max(Data_Ord.ordInt)(v2.stats.hp + 5 | 0)(v2.stats.hpMax);
                      return $120;
                  })();
                  return $123;
              };
              var $126 = {};
              for (var $127 in v) {
                  if ({}.hasOwnProperty.call(v, $127)) {
                      $126[$127] = v[$127];
                  };
              };
              $126.player = heal(v.player);
              return $126;
          };
          if (v1 instanceof Potion && v1.value0.effect instanceof Warming) {
              var warm = Data_Ord.min(Data_Ord.ordInt)(v.coldStatus - 10 | 0)(0);
              var $131 = {};
              for (var $132 in v) {
                  if ({}.hasOwnProperty.call(v, $132)) {
                      $131[$132] = v[$132];
                  };
              };
              $131.coldStatus = warm;
              return $131;
          };
          return v;
      };
  };
  var pointPlus = function (v) {
      return function (v1) {
          return {
              x: v.x + v1.x | 0, 
              y: v.y + v1.y | 0
          };
      };
  };
  var pointMinus = function (v) {
      return function (v1) {
          return {
              x: v.x - v1.x | 0, 
              y: v.y - v1.y | 0
          };
      };
  };
  var pointEquals = function (v) {
      return function (v1) {
          return v.x === v1.x && v.y === v1.y;
      };
  };
  var itemIcon = function (v) {
      if (v instanceof Weapon) {
          return "/";
      };
      if (v instanceof Armour) {
          return "[";
      };
      if (v instanceof Potion) {
          return "\xad";
      };
      return "=";
  };
  var itemColor = function (v) {
      if (v instanceof Weapon) {
          return "rgba(102, 102, 153, 0.6)";
      };
      if (v instanceof Armour) {
          return "rgba(102, 102, 143, 0.6)";
      };
      if (v instanceof Potion && v.value0.effect instanceof Healing) {
          return "rgba(255, 0, 0, 0.6)";
      };
      if (v instanceof Potion && v.value0.effect instanceof Warming) {
          return "rgba(0, 102, 0, 0.6)";
      };
      return "rgba(102, 51, 0, 0.6)";
  };
  var isTileTransparent = function (v) {
      if (v instanceof Wall) {
          return false;
      };
      if (v instanceof Mountain) {
          return false;
      };
      if (v instanceof Forest) {
          return false;
      };
      return true;
  };
  var isTileSolid = function (v) {
      if (v instanceof Ground) {
          return false;
      };
      if (v instanceof Forest) {
          return false;
      };
      if (v instanceof Water) {
          return !v.value0.frozen;
      };
      if (v instanceof Puddle) {
          return v.value0.frozen;
      };
      if (v instanceof DungeonEntrance) {
          return false;
      };
      if (v instanceof StairsUp) {
          return false;
      };
      if (v instanceof StairsDown) {
          return false;
      };
      return true;
  };
  var isPlayer = function (v) {
      if (v.creatureType instanceof Player) {
          return true;
      };
      return false;
  };
  var isCorrectArmour = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Cloak && v2 === 1) {
                  return new Data_Maybe.Just(v);
              };
              if (v1 instanceof Chest && v2 === 2) {
                  return new Data_Maybe.Just(v);
              };
              if (v1 instanceof Gloves && v2 === 3) {
                  return new Data_Maybe.Just(v);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var getPlayer = function (v) {
      return v.player;
  };
  var getLevelTile = function (level) {
      return function (p) {
          return Data_Maybe.fromMaybe(ErrorTile.value)(Data_Array.index(level.tiles)((p.y * level.width | 0) + p.x | 0));
      };
  };
  var getTile = function (v) {
      return function (p) {
          return getLevelTile(v.level)(p);
      };
  };
  var frozenColor = function (v) {
      if (v.frozen) {
          return "0.1)";
      };
      if (!v.frozen) {
          return "0.6)";
      };
      throw new Error("Failed pattern match at Rogue line 188, column 1 - line 189, column 1: " + [ v.constructor.name ]);
  };
  var tileColor = function (v) {
      if (v instanceof Ground) {
          return "rgba(139, 69, 19, " + frozenColor(v.value0);
      };
      if (v instanceof Wall) {
          return "rgba(120, 120, 120, " + frozenColor(v.value0);
      };
      if (v instanceof Mountain) {
          return "rgba(70, 70, 70, " + frozenColor(v.value0);
      };
      if (v instanceof Forest) {
          return "rgba(20, 240, 30, " + frozenColor(v.value0);
      };
      if (v instanceof Water) {
          return "rgba(20, 20, 250, " + frozenColor(v.value0);
      };
      if (v instanceof Puddle) {
          return "rgba(20, 20, 250, " + frozenColor(v.value0);
      };
      if (v instanceof Door) {
          return "rgba(200, 180, 50, " + frozenColor(v.value0);
      };
      if (v instanceof River) {
          return "rgba(10, 10, 125, 0.6)";
      };
      return "rgba(120, 120, 120, 0.6)";
  };

  // Just equips a new item, if the item corresponds with correct 'slot'
  var equip = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Armour && v2 === 1) {
                  var $200 = {};
                  for (var $201 in v) {
                      if ({}.hasOwnProperty.call(v, $201)) {
                          $200[$201] = v[$201];
                      };
                  };
                  $200.equipment = (function () {
                      var $197 = {};
                      for (var $198 in v.equipment) {
                          if ({}.hasOwnProperty.call(v.equipment, $198)) {
                              $197[$198] = v["equipment"][$198];
                          };
                      };
                      $197.cloak = isCorrectArmour(new Armour(v1.value0))(v1.value0.armourType)(1);
                      return $197;
                  })();
                  return $200;
              };
              if (v1 instanceof Armour && v2 === 2) {
                  var $207 = {};
                  for (var $208 in v) {
                      if ({}.hasOwnProperty.call(v, $208)) {
                          $207[$208] = v[$208];
                      };
                  };
                  $207.equipment = (function () {
                      var $204 = {};
                      for (var $205 in v.equipment) {
                          if ({}.hasOwnProperty.call(v.equipment, $205)) {
                              $204[$205] = v["equipment"][$205];
                          };
                      };
                      $204.chest = isCorrectArmour(new Armour(v1.value0))(v1.value0.armourType)(2);
                      return $204;
                  })();
                  return $207;
              };
              if (v1 instanceof Armour && v2 === 3) {
                  var $214 = {};
                  for (var $215 in v) {
                      if ({}.hasOwnProperty.call(v, $215)) {
                          $214[$215] = v[$215];
                      };
                  };
                  $214.equipment = (function () {
                      var $211 = {};
                      for (var $212 in v.equipment) {
                          if ({}.hasOwnProperty.call(v.equipment, $212)) {
                              $211[$212] = v["equipment"][$212];
                          };
                      };
                      $211.hands = isCorrectArmour(new Armour(v1.value0))(v1.value0.armourType)(3);
                      return $211;
                  })();
                  return $214;
              };
              if (v2 === 4) {
                  var $221 = {};
                  for (var $222 in v) {
                      if ({}.hasOwnProperty.call(v, $222)) {
                          $221[$222] = v[$222];
                      };
                  };
                  $221.equipment = (function () {
                      var $218 = {};
                      for (var $219 in v.equipment) {
                          if ({}.hasOwnProperty.call(v.equipment, $219)) {
                              $218[$219] = v["equipment"][$219];
                          };
                      };
                      $218.weapon = new Data_Maybe.Just(v1);
                      return $218;
                  })();
                  return $221;
              };
              return v;
          };
      };
  };
  var eqTheme = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Mine && y instanceof Mine) {
              return true;
          };
          if (x instanceof GoblinCave && y instanceof GoblinCave) {
              return true;
          };
          if (x instanceof Cave && y instanceof Cave) {
              return true;
          };
          if (x instanceof WizardTower && y instanceof WizardTower) {
              return true;
          };
          return false;
      };
  });
  var deleteItem = function (v) {
      return function (i) {
          var $228 = {};
          for (var $229 in v) {
              if ({}.hasOwnProperty.call(v, $229)) {
                  $228[$229] = v[$229];
              };
          };
          $228.inv = Data_Maybe.fromMaybe(v.inv)(Data_Array.deleteAt(i)(v.inv));
          return $228;
      };
  };
  var defaultStats = {
      hpMax: 200, 
      hp: 200, 
      str: 10, 
      dex: 10, 
      "int": 10
  };
  var defaultArmourStats = {
      ap: 0, 
      cr: 0, 
      weight: 0
  };
  var creatureTypeStats = function (v) {
      if (v instanceof AlphaWolf) {
          return {
              hpMax: 16, 
              hp: 16, 
              str: 15, 
              dex: 17, 
              "int": 9
          };
      };
      if (v instanceof Wolf) {
          return {
              hpMax: 10, 
              hp: 10, 
              str: 10, 
              dex: 12, 
              "int": 9
          };
      };
      if (v instanceof Bear) {
          return {
              hpMax: 20, 
              hp: 20, 
              str: 20, 
              dex: 10, 
              "int": 9
          };
      };
      if (v instanceof Goblin) {
          return {
              hpMax: 10, 
              hp: 10, 
              str: 8, 
              dex: 10, 
              "int": 8
          };
      };
      if (v instanceof Snowman) {
          return {
              hpMax: 15, 
              hp: 15, 
              str: 18, 
              dex: 16, 
              "int": 9
          };
      };
      if (v instanceof IceCorpse) {
          return {
              hpMax: 25, 
              hp: 25, 
              str: 12, 
              dex: 8, 
              "int": 9
          };
      };
      if (v instanceof Tim) {
          return {
              hpMax: 99, 
              hp: 99, 
              str: 10, 
              dex: 15, 
              "int": 50
          };
      };
      return {
          hpMax: 10, 
          hp: 10, 
          str: 10, 
          dex: 10, 
          "int": 10
      };
  };
  var creatureIcon = function (v) {
      if (v.creatureType instanceof Player) {
          return "@";
      };
      if (v.creatureType instanceof AlphaWolf) {
          return "W";
      };
      if (v.creatureType instanceof Wolf) {
          return "w";
      };
      if (v.creatureType instanceof Bear) {
          return "B";
      };
      if (v.creatureType instanceof Goblin) {
          return "g";
      };
      if (v.creatureType instanceof Snowman) {
          return "\xea";
      };
      if (v.creatureType instanceof IceCorpse) {
          return "Z";
      };
      if (v.creatureType instanceof Tim) {
          return "\x01";
      };
      return "?";
  };
  var creatureColor = function (v) {
      if (v.creatureType instanceof Player) {
          return "rgba(0, 200, 0, 0.6)";
      };
      if (v.creatureType instanceof AlphaWolf) {
          return "rgba(200, 200, 200, 0.6)";
      };
      if (v.creatureType instanceof Wolf) {
          return "rgba(100, 100, 100, 0.6)";
      };
      if (v.creatureType instanceof Bear) {
          return "rgba(156, 98, 66, 0.6)";
      };
      if (v.creatureType instanceof Goblin) {
          return "rgba(30, 150, 0, 0.6)";
      };
      if (v.creatureType instanceof Snowman) {
          return "rgba(200, 200, 200, 0.6)";
      };
      if (v.creatureType instanceof IceCorpse) {
          return "rgba(126, 121, 196, 0.6)";
      };
      if (v.creatureType instanceof Tim) {
          return "rgba(245, 65, 241, 0.6)";
      };
      return "rgba(200, 200, 200, 0.6)";
  };
  var creatureBaseDmg = function (v) {
      if (v.creatureType instanceof AlphaWolf) {
          return 2;
      };
      if (v.creatureType instanceof Bear) {
          return 3;
      };
      if (v.creatureType instanceof Snowman) {
          return 4;
      };
      if (v.creatureType instanceof Tim) {
          return 10;
      };
      return 1;
  };
  var dmg = function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Weapon) {
              return (v.stats.str + (weaponPrefixStats(v1.value0.value0.prefix)).dmg | 0) + (weaponTypeStats(v1.value0.value0.weaponType)).dmg | 0;
          };
          return v.stats.str * creatureBaseDmg(v) | 0;
      };
  };
  var createLevel = function (x) {
      return function (y) {
          return function (t) {
              var zero = {
                  x: 0, 
                  y: 0
              };
              return {
                  tiles: Data_Array.replicate(x * y | 0)(t), 
                  width: x, 
                  height: y, 
                  enemies: [  ], 
                  items: [  ], 
                  up: zero, 
                  down: zero
              };
          };
      };
  };
  var initialGameState = {
      level: createLevel(75)(25)(new Ground({
          frozen: false
      })), 
      player: {
          creatureType: new Player({
              name: "Frozty"
          }), 
          pos: {
              x: 0, 
              y: 11
          }, 
          stats: defaultStats, 
          inv: [  ]
      }, 
      coldStatus: 0, 
      equipment: {
          cloak: Data_Maybe.Nothing.value, 
          chest: Data_Maybe.Nothing.value, 
          hands: Data_Maybe.Nothing.value, 
          weapon: Data_Maybe.Nothing.value
      }
  };
  var armourTypeStats = function (v) {
      if (v instanceof Cloak) {
          return {
              ap: 1, 
              cr: 5, 
              weight: 8
          };
      };
      if (v instanceof Gloves) {
          return {
              ap: 0, 
              cr: 5, 
              weight: 3
          };
      };
      return {
          ap: 5, 
          cr: 1, 
          weight: 20
      };
  };
  var armourPrefixStats = function (v) {
      if (v instanceof LightA) {
          return {
              ap: 0, 
              cr: 0, 
              weight: -3 | 0
          };
      };
      if (v instanceof ThickA) {
          return {
              ap: 1, 
              cr: 3, 
              weight: 5
          };
      };
      if (v instanceof MasterworkA) {
          return {
              ap: 4, 
              cr: 1, 
              weight: 0
          };
      };
      return {
          ap: 0, 
          cr: 0, 
          weight: 0
      };
  };
  var itemWeight = function (v) {
      if (v instanceof Weapon) {
          return (weaponTypeStats(v.value0.weaponType)).weight + (weaponPrefixStats(v.value0.prefix)).weight | 0;
      };
      if (v instanceof Armour) {
          return (armourTypeStats(v.value0.armourType)).weight + (armourPrefixStats(v.value0.prefix)).weight | 0;
      };
      if (v instanceof Wood) {
          return 10;
      };
      return 2;
  };
  var addStats = function (a) {
      return function (b) {
          return {
              hpMax: a.hpMax + b.hpMax | 0, 
              hp: a.hp + b.hp | 0, 
              str: a.str + b.str | 0, 
              dex: a.dex + b.dex | 0, 
              "int": a["int"] + b["int"] | 0
          };
      };
  };
  var addItem = function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              var $268 = {};
              for (var $269 in v) {
                  if ({}.hasOwnProperty.call(v, $269)) {
                      $268[$269] = v[$269];
                  };
              };
              $268.inv = Data_Array.snoc(v.inv)(v1.value0);
              return $268;
          };
          return v;
      };
  };
  var unEquip = function (v) {
      return function (v1) {
          if (v1 === 1) {
              var $277 = {};
              for (var $278 in v) {
                  if ({}.hasOwnProperty.call(v, $278)) {
                      $277[$278] = v[$278];
                  };
              };
              $277.equipment = (function () {
                  var $274 = {};
                  for (var $275 in v.equipment) {
                      if ({}.hasOwnProperty.call(v.equipment, $275)) {
                          $274[$275] = v["equipment"][$275];
                      };
                  };
                  $274.cloak = Data_Maybe.Nothing.value;
                  return $274;
              })();
              $277.player = addItem(v.player)(v.equipment.cloak);
              return $277;
          };
          if (v1 === 2) {
              var $283 = {};
              for (var $284 in v) {
                  if ({}.hasOwnProperty.call(v, $284)) {
                      $283[$284] = v[$284];
                  };
              };
              $283.equipment = (function () {
                  var $280 = {};
                  for (var $281 in v.equipment) {
                      if ({}.hasOwnProperty.call(v.equipment, $281)) {
                          $280[$281] = v["equipment"][$281];
                      };
                  };
                  $280.chest = Data_Maybe.Nothing.value;
                  return $280;
              })();
              $283.player = addItem(v.player)(v.equipment.chest);
              return $283;
          };
          if (v1 === 3) {
              var $289 = {};
              for (var $290 in v) {
                  if ({}.hasOwnProperty.call(v, $290)) {
                      $289[$290] = v[$290];
                  };
              };
              $289.equipment = (function () {
                  var $286 = {};
                  for (var $287 in v.equipment) {
                      if ({}.hasOwnProperty.call(v.equipment, $287)) {
                          $286[$287] = v["equipment"][$287];
                      };
                  };
                  $286.hands = Data_Maybe.Nothing.value;
                  return $286;
              })();
              $289.player = addItem(v.player)(v.equipment.hands);
              return $289;
          };
          if (v1 === 4) {
              var $295 = {};
              for (var $296 in v) {
                  if ({}.hasOwnProperty.call(v, $296)) {
                      $295[$296] = v[$296];
                  };
              };
              $295.equipment = (function () {
                  var $292 = {};
                  for (var $293 in v.equipment) {
                      if ({}.hasOwnProperty.call(v.equipment, $293)) {
                          $292[$293] = v["equipment"][$293];
                      };
                  };
                  $292.weapon = Data_Maybe.Nothing.value;
                  return $292;
              })();
              $295.player = addItem(v.player)(v.equipment.weapon);
              return $295;
          };
          return v;
      };
  };
  var addArmourStats = function (a) {
      return function (b) {
          return {
              ap: a.ap + b.ap | 0, 
              cr: a.cr + b.cr | 0, 
              weight: a.weight + b.weight | 0
          };
      };
  };
  var armourStats = function (v) {
      if (v instanceof Armour) {
          return addArmourStats(armourTypeStats(v.value0.armourType))(armourPrefixStats(v.value0.prefix));
      };
      return defaultArmourStats;
  };
  var playerArmour = function (v) {
      return ((armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.cloak))).ap + (armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.chest))).ap | 0) + (armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.hands))).ap | 0;
  };
  var attack = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1.creatureType instanceof Player) {
                  var $307 = {};
                  for (var $308 in v2) {
                      if ({}.hasOwnProperty.call(v2, $308)) {
                          $307[$308] = v2[$308];
                      };
                  };
                  $307.stats = (function () {
                      var $304 = {};
                      for (var $305 in v2.stats) {
                          if ({}.hasOwnProperty.call(v2.stats, $305)) {
                              $304[$305] = v2["stats"][$305];
                          };
                      };
                      $304.hp = v2.stats.hp - dmg(v1)(v.equipment.weapon) | 0;
                      return $304;
                  })();
                  return $307;
              };
              if (v2.creatureType instanceof Player) {
                  var dmgToPlayer = Data_Ord.min(Data_Ord.ordInt)(1)(dmg(v1)(Data_Maybe.Nothing.value) - playerArmour(v) | 0);
                  var $315 = {};
                  for (var $316 in v2) {
                      if ({}.hasOwnProperty.call(v2, $316)) {
                          $315[$316] = v2[$316];
                      };
                  };
                  $315.stats = (function () {
                      var $312 = {};
                      for (var $313 in v2.stats) {
                          if ({}.hasOwnProperty.call(v2.stats, $313)) {
                              $312[$313] = v2["stats"][$313];
                          };
                      };
                      $312.hp = v2.stats.hp - dmgToPlayer | 0;
                      return $312;
                  })();
                  return $315;
              };
              var $323 = {};
              for (var $324 in v2) {
                  if ({}.hasOwnProperty.call(v2, $324)) {
                      $323[$324] = v2[$324];
                  };
              };
              $323.stats = (function () {
                  var $320 = {};
                  for (var $321 in v2.stats) {
                      if ({}.hasOwnProperty.call(v2.stats, $321)) {
                          $320[$321] = v2["stats"][$321];
                      };
                  };
                  $320.hp = v2.stats.hp - dmg(v1)(Data_Maybe.Nothing.value) | 0;
                  return $320;
              })();
              return $323;
          };
      };
  };
  var playerColdRes = function (v) {
      return ((armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.cloak))).cr + (armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.chest))).cr | 0) + (armourStats(Data_Maybe.fromMaybe(Wood.value)(v.equipment.hands))).cr | 0;
  };
  var cold = function (v) {
      var $328 = {};
      for (var $329 in v) {
          if ({}.hasOwnProperty.call(v, $329)) {
              $328[$329] = v[$329];
          };
      };
      $328.coldStatus = (v.coldStatus + 20 | 0) - playerColdRes(v) | 0;
      return $328;
  };
  exports["CommonA"] = CommonA;
  exports["LightA"] = LightA;
  exports["ThickA"] = ThickA;
  exports["MasterworkA"] = MasterworkA;
  exports["Cloak"] = Cloak;
  exports["Chest"] = Chest;
  exports["Gloves"] = Gloves;
  exports["Creature"] = Creature;
  exports["Player"] = Player;
  exports["AlphaWolf"] = AlphaWolf;
  exports["Wolf"] = Wolf;
  exports["Bear"] = Bear;
  exports["Goblin"] = Goblin;
  exports["Snowman"] = Snowman;
  exports["IceCorpse"] = IceCorpse;
  exports["Tim"] = Tim;
  exports["Ismo"] = Ismo;
  exports["GameState"] = GameState;
  exports["Weapon"] = Weapon;
  exports["Armour"] = Armour;
  exports["Potion"] = Potion;
  exports["Wood"] = Wood;
  exports["Healing"] = Healing;
  exports["Warming"] = Warming;
  exports["Mine"] = Mine;
  exports["GoblinCave"] = GoblinCave;
  exports["Cave"] = Cave;
  exports["WizardTower"] = WizardTower;
  exports["Ground"] = Ground;
  exports["Wall"] = Wall;
  exports["Mountain"] = Mountain;
  exports["Forest"] = Forest;
  exports["Water"] = Water;
  exports["Puddle"] = Puddle;
  exports["Door"] = Door;
  exports["River"] = River;
  exports["StairsUp"] = StairsUp;
  exports["StairsDown"] = StairsDown;
  exports["DungeonEntrance"] = DungeonEntrance;
  exports["ErrorTile"] = ErrorTile;
  exports["Common"] = Common;
  exports["Rusty"] = Rusty;
  exports["Masterwork"] = Masterwork;
  exports["Sharp"] = Sharp;
  exports["Axe"] = Axe;
  exports["Dagger"] = Dagger;
  exports["Sword"] = Sword;
  exports["addArmourStats"] = addArmourStats;
  exports["addItem"] = addItem;
  exports["addStats"] = addStats;
  exports["armourPrefixStats"] = armourPrefixStats;
  exports["armourStats"] = armourStats;
  exports["armourTypeStats"] = armourTypeStats;
  exports["attack"] = attack;
  exports["cold"] = cold;
  exports["createLevel"] = createLevel;
  exports["creatureBaseDmg"] = creatureBaseDmg;
  exports["creatureColor"] = creatureColor;
  exports["creatureIcon"] = creatureIcon;
  exports["creatureTypeStats"] = creatureTypeStats;
  exports["defaultArmourStats"] = defaultArmourStats;
  exports["defaultStats"] = defaultStats;
  exports["deleteItem"] = deleteItem;
  exports["dmg"] = dmg;
  exports["equip"] = equip;
  exports["frozenColor"] = frozenColor;
  exports["getLevelTile"] = getLevelTile;
  exports["getPlayer"] = getPlayer;
  exports["getTile"] = getTile;
  exports["initialGameState"] = initialGameState;
  exports["isCorrectArmour"] = isCorrectArmour;
  exports["isPlayer"] = isPlayer;
  exports["isTileSolid"] = isTileSolid;
  exports["isTileTransparent"] = isTileTransparent;
  exports["itemColor"] = itemColor;
  exports["itemIcon"] = itemIcon;
  exports["itemWeight"] = itemWeight;
  exports["playerArmour"] = playerArmour;
  exports["playerColdRes"] = playerColdRes;
  exports["pointEquals"] = pointEquals;
  exports["pointMinus"] = pointMinus;
  exports["pointPlus"] = pointPlus;
  exports["potionEffect"] = potionEffect;
  exports["setExits"] = setExits;
  exports["setLevelTile"] = setLevelTile;
  exports["setPlayer"] = setPlayer;
  exports["setTile"] = setTile;
  exports["tileColor"] = tileColor;
  exports["tileIcon"] = tileIcon;
  exports["unEquip"] = unEquip;
  exports["weaponPrefixStats"] = weaponPrefixStats;
  exports["weaponTypeStats"] = weaponTypeStats;
  exports["showCreature"] = showCreature;
  exports["showTile"] = showTile;
  exports["eqTheme"] = eqTheme;
})(PS["Rogue"] = PS["Rogue"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Random = function (x) {
      return x;
  };
  var runRandom = function (v) {
      return function (seed) {
          return v(seed);
      };
  };

  //showResult :: forall a. Show a => { value :: a, seed :: Seed } -> String

  //showResult r = "(" <> show r.value <> ", " <> show r.seed <> ")"
  var randomFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Random(function (seed) {
              var result = v(seed);
              var $8 = {};
              for (var $9 in result) {
                  if ({}.hasOwnProperty.call(result, $9)) {
                      $8[$9] = result[$9];
                  };
              };
              $8.value = f(result.value);
              return $8;
          });
      };
  });
  var generate = (function () {
      var abs = function (x) {
          if (x < 0) {
              return -x | 0;
          };
          if (Data_Boolean.otherwise) {
              return x;
          };
          throw new Error("Failed pattern match at Random line 45, column 1 - line 54, column 31: " + [ x.constructor.name ]);
      };
      return Random(function (seed) {
          var $$new = abs(((214013 * seed | 0) + 158188 | 0) % 8388608);
          return {
              value: $$new, 
              seed: $$new
          };
      });
  })();
  var generateInt = function (min) {
      return function (max) {
          return Data_Functor.map(randomFunctor)(function (n) {
              return min + n % (max - min | 0) | 0;
          })(generate);
      };
  };
  var selectOne = function (arr) {
      return Data_Functor.map(randomFunctor)(Data_Array.index(arr))(generateInt(0)(Data_Array.length(arr)));
  };
  var unsafeSelectOne = function (dictPartial) {
      return function (arr) {
          return Data_Functor.map(randomFunctor)(Data_Array.unsafeIndex(dictPartial)(arr))(generateInt(0)(Data_Array.length(arr)));
      };
  };
  var applyRandom = new Control_Apply.Apply(function () {
      return randomFunctor;
  }, function (rf) {
      return function (ra) {
          return Random(function (seed) {
              var f = runRandom(rf)(seed);
              var a = runRandom(ra)(f.seed);
              return {
                  value: f.value(a.value), 
                  seed: a.seed
              };
          });
      };
  });
  var randomApplicative = new Control_Applicative.Applicative(function () {
      return applyRandom;
  }, function (x) {
      return Random(function (seed) {
          return {
              value: x, 
              seed: seed
          };
      });
  });
  var randomBind = new Control_Bind.Bind(function () {
      return applyRandom;
  }, function (a) {
      return function (f) {
          return Random(function (seed) {
              var result = runRandom(a)(seed);
              return runRandom(f(result.value))(result.seed);
          });
      };
  });
  var randomMonad = new Control_Monad.Monad(function () {
      return randomApplicative;
  }, function () {
      return randomBind;
  });
  exports["Random"] = Random;
  exports["generate"] = generate;
  exports["generateInt"] = generateInt;
  exports["runRandom"] = runRandom;
  exports["selectOne"] = selectOne;
  exports["unsafeSelectOne"] = unsafeSelectOne;
  exports["randomFunctor"] = randomFunctor;
  exports["applyRandom"] = applyRandom;
  exports["randomBind"] = randomBind;
  exports["randomApplicative"] = randomApplicative;
  exports["randomMonad"] = randomMonad;
})(PS["Random"] = PS["Random"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Rogue = PS["Rogue"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Random = PS["Random"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var filterNegativeWeights = Data_Array.filter(function (x) {
      return x.weight > 0;
  });
  var randomWeighted = function (initialItems) {
      var weightSum = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (a) {
              return acc + a.weight | 0;
          };
      })(0)(initialItems);
      var go = function (__copy_items) {
          return function (__copy_weight) {
              var items = __copy_items;
              var weight = __copy_weight;
              tco: while (true) {
                  var $11 = Data_Array.head(items);
                  if ($11 instanceof Data_Maybe.Nothing) {
                      return Partial_Unsafe.unsafeCrashWith("empty array in randomWeighted");
                  };
                  if ($11 instanceof Data_Maybe.Just) {
                      var $12 = weight > $11.value0.weight;
                      if ($12) {
                          var tail$prime = Data_Maybe.fromMaybe([  ])(Data_Array.tail(items));
                          var __tco_weight = weight - $11.value0.weight | 0;
                          items = tail$prime;
                          weight = __tco_weight;
                          continue tco;
                      };
                      if (!$12) {
                          return $11.value0.item;
                      };
                      throw new Error("Failed pattern match at ContentGenerator line 23, column 21 - line 26, column 40: " + [ $12.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at ContentGenerator line 20, column 13 - line 26, column 40: " + [ $11.constructor.name ]);
              };
          };
      };
      return Data_Functor.map(Random.randomFunctor)(go(filterNegativeWeights(initialItems)))(Random.generateInt(0)(weightSum));
  };
  var randomEnemy = function (theme) {
      return function (depth) {
          var randomCreatureType = [ {
              item: Rogue.AlphaWolf.value, 
              weight: 20
          }, {
              item: Rogue.Wolf.value, 
              weight: 60
          }, {
              item: Rogue.Bear.value, 
              weight: 30
          }, {
              item: Rogue.Goblin.value, 
              weight: 60
          }, {
              item: Rogue.Snowman.value, 
              weight: 30
          }, {
              item: Rogue.IceCorpse.value, 
              weight: 50
          } ];
          var randomCreatureStats = [ {
              item: {
                  hpMax: 14, 
                  hp: 14, 
                  str: 11, 
                  dex: 10, 
                  "int": 9
              }, 
              weight: 10
          }, {
              item: {
                  hpMax: 12, 
                  hp: 12, 
                  str: 10, 
                  dex: 11, 
                  "int": 13
              }, 
              weight: 20
          }, {
              item: {
                  hpMax: 10, 
                  hp: 10, 
                  str: 10, 
                  dex: 10, 
                  "int": 10
              }, 
              weight: 60
          }, {
              item: {
                  hpMax: 8, 
                  hp: 8, 
                  str: 8, 
                  dex: 8, 
                  "int": 8
              }, 
              weight: 50
          } ];
          var randomCreature = Control_Bind.bind(Random.randomBind)(randomWeighted(randomCreatureStats))(function (v) {
              return Control_Bind.bind(Random.randomBind)(randomWeighted(randomCreatureType))(function (v1) {
                  return Control_Applicative.pure(Random.randomApplicative)({
                      creatureType: v1, 
                      pos: {
                          x: 0, 
                          y: 0
                      }, 
                      stats: Rogue.addStats(v)(Rogue.creatureTypeStats(v1)), 
                      inv: [  ]
                  });
              });
          });
          return randomCreature;
      };
  };
  var randomItem = function (theme) {
      return function (depth) {
          var weaponTypeWeights = [ {
              item: Rogue.Axe.value, 
              weight: 15
          }, {
              item: Rogue.Dagger.value, 
              weight: 40
          }, {
              item: Rogue.Sword.value, 
              weight: 10
          } ];
          var weaponPrefixWeights = [ {
              item: Rogue.Common.value, 
              weight: 30
          }, {
              item: Rogue.Rusty.value, 
              weight: 30
          }, {
              item: Rogue.Masterwork.value, 
              weight: 0
          }, {
              item: Rogue.Sharp.value, 
              weight: 10
          } ];
          var randomWeapon = Control_Bind.bind(Random.randomBind)(randomWeighted(weaponTypeWeights))(function (v) {
              return Control_Bind.bind(Random.randomBind)(randomWeighted(weaponPrefixWeights))(function (v1) {
                  return Control_Applicative.pure(Random.randomApplicative)(new Rogue.Weapon({
                      weaponType: v, 
                      prefix: v1
                  }));
              });
          });
          var potionEffectWeights = [ {
              item: Rogue.Healing.value, 
              weight: 50
          }, {
              item: Rogue.Warming.value, 
              weight: 50
          } ];
          var randomPotion = Control_Bind.bind(Random.randomBind)(randomWeighted(potionEffectWeights))(function (v) {
              return Control_Applicative.pure(Random.randomApplicative)(new Rogue.Potion({
                  effect: v
              }));
          });
          var armourTypeWeights = [ {
              item: Rogue.Cloak.value, 
              weight: 10
          }, {
              item: Rogue.Chest.value, 
              weight: 10
          }, {
              item: Rogue.Gloves.value, 
              weight: 10
          } ];
          var armourPrefixWeights = [ {
              item: Rogue.CommonA.value, 
              weight: 30
          }, {
              item: Rogue.LightA.value, 
              weight: 20
          }, {
              item: Rogue.ThickA.value, 
              weight: 10
          }, {
              item: Rogue.MasterworkA.value, 
              weight: 5
          } ];
          var randomArmour = Control_Bind.bind(Random.randomBind)(randomWeighted(armourTypeWeights))(function (v) {
              return Control_Bind.bind(Random.randomBind)(randomWeighted(armourPrefixWeights))(function (v1) {
                  return Control_Applicative.pure(Random.randomApplicative)(new Rogue.Armour({
                      armourType: v, 
                      prefix: v1
                  }));
              });
          });
          return Control_Bind.bind(Random.randomBind)(randomWeapon)(function (v) {
              return Control_Bind.bind(Random.randomBind)(randomArmour)(function (v1) {
                  return Control_Bind.bind(Random.randomBind)(randomPotion)(function (v2) {
                      return Control_Bind.bind(Random.randomBind)(Control_Applicative.pure(Random.randomApplicative)(Rogue.Wood.value))(function (v3) {
                          return randomWeighted([ {
                              item: v, 
                              weight: 20
                          }, {
                              item: v1, 
                              weight: 20
                          }, {
                              item: v2, 
                              weight: 10
                          }, {
                              item: v3, 
                              weight: 5
                          } ]);
                      });
                  });
              });
          });
      };
  };
  exports["filterNegativeWeights"] = filterNegativeWeights;
  exports["randomEnemy"] = randomEnemy;
  exports["randomItem"] = randomItem;
  exports["randomWeighted"] = randomWeighted;
})(PS["ContentGenerator"] = PS["ContentGenerator"] || {});
